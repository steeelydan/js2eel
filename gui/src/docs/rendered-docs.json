{
    "api-documentation": "<h1>API Documentation</h1>\n<ul>\n<li><a target=\"_blank\" href=\"#configuration\">Configuration</a></li>\n<li><a target=\"_blank\" href=\"#debugging\">Debugging</a></li>\n<li><a target=\"_blank\" href=\"#jsfx-computation-stages\">JSFX Computation Stages</a></li>\n<li><a target=\"_blank\" href=\"#data-structures\">Data Structures</a></li>\n<li><a target=\"_blank\" href=\"#audio-constants\">Audio Constants</a></li>\n<li><a target=\"_blank\" href=\"#math-constants\">Math Constants</a></li>\n<li><a target=\"_blank\" href=\"#math-functions\">Math Functions</a></li>\n<li><a target=\"_blank\" href=\"#memory-functions\">Memory Functions</a></li>\n<li><a target=\"_blank\" href=\"#file-functions\">File Functions</a></li>\n<li><a target=\"_blank\" href=\"#fft-&-mdct-functions\">FFT & MDCT Functions</a></li>\n</ul>\n<h2>Configuration</h2>\n<h3>config()</h3>\n<p>Configures the plugin.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">config</span>({\n    description,\n    inChannels,\n    outChannels,\n    extTailSize\n}: {\n    <span class=\"hljs-attr\">description</span>: <span class=\"hljs-built_in\">number</span>;\n    <span class=\"hljs-attr\">inChannels</span>: <span class=\"hljs-built_in\">number</span>;\n    <span class=\"hljs-attr\">outChannels</span>: <span class=\"hljs-built_in\">number</span>;\n    extTailSize?: <span class=\"hljs-built_in\">number</span>;\n}): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title function_\">config</span>({ <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;volume&#x27;</span>, <span class=\"hljs-attr\">inChannels</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">outChannels</span>: <span class=\"hljs-number\">2</span> });\n</code></pre>\n<h3>slider()</h3>\n<p>Registers a slider and its bound variable to be displayed in the plugin.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">slider</span>(\n    <span class=\"hljs-attr\">sliderNumber</span>: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-attr\">variable</span>: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-attr\">initialValue</span>: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-attr\">min</span>: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-attr\">max</span>: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-attr\">step</span>: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-built_in\">string</span>\n): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title function_\">slider</span>(<span class=\"hljs-number\">1</span>, volume, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-string\">&#x27;Volume [dB]&#x27;</span>);\n</code></pre>\n<h3>selectBox()</h3>\n<p>Registers a select box and its bound variable to be displayed in the plugin.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">selectBox</span>(\n    <span class=\"hljs-attr\">sliderNumber</span>: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-attr\">variable</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-attr\">initialValue</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-attr\">values</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-attr\">label</span>: <span class=\"hljs-built_in\">string</span> }[],\n    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-built_in\">string</span>\n): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title function_\">selectBox</span>(\n    <span class=\"hljs-number\">3</span>,\n    algorithm,\n    <span class=\"hljs-string\">&#x27;sigmoid&#x27;</span>,\n    [\n        { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;sigmoid&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Sigmoid&#x27;</span> },\n        { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;htan&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Hyperbolic Tangent&#x27;</span> },\n        { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;hclip&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Hard Clip&#x27;</span> }\n    ],\n    <span class=\"hljs-string\">&#x27;Algorithm&#x27;</span>\n);\n</code></pre>\n<h3>fileSelector()</h3>\n<p>Registers a file selector to be displayed in the plugin.</p>\n<p>The path is relative to <REAPER_DIR>/data.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">fileSelector</span>(\n    <span class=\"hljs-attr\">sliderNumber</span>: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-attr\">variable</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-attr\">defaultValue</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-built_in\">string</span>\n): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title function_\">fileSelector</span>(\n    <span class=\"hljs-number\">5</span>,\n    ampModel,\n    <span class=\"hljs-string\">&#x27;amp_models&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;none&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Impulse Response&#x27;</span>\n);\n</code></pre>\n<h2>Debugging</h2>\n<h3>console</h3>\n<p>JS2EEL only supports the <code>.log()</code> method.\n<code>console.log()</code> creates a debug variable to print the value of a variable in the JSFX dev environment.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">console</span>: {\n    <span class=\"hljs-attr\">log</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">someVar</span>: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n};\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> myVal = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myVal);\n</code></pre>\n<h2>JSFX Computation Stages</h2>\n<p>These functions correspond to JSFX&#39;s <code>@sample</code> etc.</p>\n<h3>onInit()</h3>\n<p>Init variables and functions here.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">onInit</span>(<span class=\"hljs-attr\">callback</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<h3>onSlider()</h3>\n<p>What happens when a slider is moved.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">onSlider</span>(<span class=\"hljs-attr\">callback</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<h3>onBlock()</h3>\n<p>Called for every audio block.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">onBlock</span>(<span class=\"hljs-attr\">callback</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<h3>onSample()</h3>\n<p>Called for every single sample.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">onSample</span>(<span class=\"hljs-attr\">callback</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<h3>eachChannel()</h3>\n<p>Iterates over each channel and provides the current sample for manipulation.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">eachChannel</span>(<span class=\"hljs-attr\">callback</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">sample</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">channel</span>: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<h2>Data Structures</h2>\n<h3>EelBuffer</h3>\n<p>A fixed-size, multi-dimensional container for audio samples.</p>\n<p>Access: <code>buf[dimension][position]</code></p>\n<p>Translates to EEL2s memory objects. Is not inlined in the EEL source, so\nonly feasible for large data. For small data, use EelArray.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title class_\">EelBuffer</span> {\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">dimensions</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">number</span></span>);\n\n    <span class=\"hljs-title function_\">dimensions</span>(): <span class=\"hljs-built_in\">number</span>;\n    <span class=\"hljs-title function_\">size</span>(): <span class=\"hljs-built_in\">number</span>;\n    <span class=\"hljs-title function_\">start</span>(): <span class=\"hljs-built_in\">number</span>;\n}\n</code></pre>\n<h3>EelArray</h3>\n<p>A fixed-size, multi-dimensional container for numeric data.</p>\n<p>Access: <code>arr[dimension][position]</code></p>\n<p>Is inlined in the EEL source, dimensions and size are restricted to 16 each. For large data,\nuse EelBuffer.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title class_\">EelArray</span> {\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">dimensions</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">number</span></span>);\n\n    <span class=\"hljs-title function_\">dimensions</span>(): <span class=\"hljs-built_in\">number</span>;\n    <span class=\"hljs-title function_\">size</span>(): <span class=\"hljs-built_in\">number</span>;\n}\n</code></pre>\n<h2>Audio Constants</h2>\n<h3>srate</h3>\n<p>The sample rate of your project</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">srate</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>num_ch</h3>\n<p>Number of channels available</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">num_ch</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>samplesblock</h3>\n<p>How many samples will come before the next <code>onBlock()</code> call</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">samplesblock</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>tempo</h3>\n<p>The tempo of your project</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">tempo</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>play_state</h3>\n<p>The current playback state of REAPER (0=stopped, &lt;0=error, 1=playing, 2=paused, 5=recording, 6=record paused)</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">play_state</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>play_position</h3>\n<p>The current playback position in REAPER (as of last @block), in seconds</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">play_position</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>beat_position</h3>\n<p>Read-only. The current playback position (as of last @block) in REAPER, in beats (beats = quarternotes in /4 time signatures).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">beat_position</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>ts_num</h3>\n<p>Read-only. The current time signature numerator, i.e. 3.0 if using 3/4 time.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">ts_num</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>ts_denom</h3>\n<p>Read-only. The current time signature denominator, i.e. 4.0 if using 3/4 time.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">ts_denom</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>spl&lt;1-64&gt;</h3>\n<p>Channel 1 (L) sample variable</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">spl0</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h2>Math Constants</h2>\n<h3>$pi</h3>\n<p>Pi</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-attr\">$pi</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h2>Math Functions</h2>\n<p>These functions correspond exactly to their equivalents in JSFX/EEL2.</p>\n<h3>sin()</h3>\n<p>Returns the Sine of the angle specified (specified in radians).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">sin</span>(<span class=\"hljs-attr\">angle</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>cos()</h3>\n<p>Returns the Cosine of the angle specified (specified in radians).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">cos</span>(<span class=\"hljs-attr\">angle</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>tan()</h3>\n<p>Returns the Tangent of the angle specified (specified in radians).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">tan</span>(<span class=\"hljs-attr\">angle</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>asin()</h3>\n<p>Returns the Arc Sine of the value specified (return value is in radians).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">asin</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>acos()</h3>\n<p>Returns the Arc Cosine of the value specified (return value is in radians).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">acos</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>atan()</h3>\n<p>Returns the Arc Tangent of the value specified (return value is in radians).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">atan</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>atan2()</h3>\n<p>Returns the Arc Tangent of x divided by y (return value is in radians).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">atan2</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>sqr()</h3>\n<p>Returns the square of the parameter (similar to x*x, though only evaluating x once).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">sqr</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>sqrt()</h3>\n<p>Returns the square root of the parameter.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">sqrt</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>pow()</h3>\n<p>Returns the first parameter raised to the second parameter-th power.\nIdentical in behavior and performance to the ^ operator.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">pow</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>exp()</h3>\n<p>Returns the number e (approx 2.718) raised to the parameter-th power.\nThis function is significantly faster than pow() or the ^ operator.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">exp</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>log()</h3>\n<p>Returns the natural logarithm (base e) of the parameter.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">log</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>log10()</h3>\n<p>Returns the logarithm (base 10) of the parameter.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">log10</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>abs()</h3>\n<p>Returns the absolute value of the parameter.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">abs</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>min()</h3>\n<p>Returns the minimum value of the two parameters.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">min</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>max()</h3>\n<p>Returns the maximum value of the two parameters.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">max</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>sign()</h3>\n<p>Returns the sign of the parameter (-1, 0, or 1).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">sign</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>rand()</h3>\n<p>Returns a pseudo-random number between 0 and the parameter.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>floor()</h3>\n<p>Rounds the value to the lowest integer possible (floor(3.9)==3, floor(-3.1)==-4).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>ceil()</h3>\n<p>Rounds the value to the highest integer possible (ceil(3.1)==4, ceil(-3.9)==-3).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">ceil</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>invsqrt()</h3>\n<p>Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">invsqrt</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h2>Memory Functions</h2>\n<h3>memset()</h3>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">memset</span>(): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<h2>File Functions</h2>\n<h3>file_open()</h3>\n<p>Opens a file from a file slider. Once open, you may use all of the file functions available. Be sure to close the file handle when done with it, using file_close(). The search path for finding files depends on the method used, but generally speaking in 4.59+ it will look in the same path as the current effect, then in the JS Data/ directory.</p>\n<p>@param fileSelector A variable that is bound to the respective file selector. Will be compiled to sliderXY. FIXME types</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">file_open</span>(<span class=\"hljs-attr\">fileSelector</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>file_close()</h3>\n<p>Closes a file opened with file_open().</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">file_close</span>(<span class=\"hljs-attr\">fileHandle</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<h3>file_avail()</h3>\n<p>Returns the number of items remaining in the file, if it is in read mode. Returns &lt; 0 if in write mode. If the file is in text mode (file_text(handle) returns TRUE), then the return value is simply 0 if EOF, 1 if not EOF.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">file_avail</span>(<span class=\"hljs-attr\">fileSelector</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h3>file_riff()</h3>\n<p>If the file was a media file (.wav, .ogg, etc), this will set the first parameter to the number of channels, and the second to the samplerate.</p>\n<p>REAPER 6.29+: if the caller sets nch to &#39;rqsr&#39; and samplerate to a valid samplerate, the file will be resampled to the desired samplerate (this must ONLY be called before any file_var() or file_mem() calls and will change the value returned by file_avail())</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">file_riff</span>(<span class=\"hljs-attr\">fileHandle</span>: <span class=\"hljs-built_in\">any</span>, <span class=\"hljs-attr\">numberOfCh</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">sampleRate</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<h3>file_mem()</h3>\n<p>Reads (or writes) the block of local memory from(to) the current file. Returns the actual number of items read (or written).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">file_mem</span>(<span class=\"hljs-attr\">fileHandle</span>: <span class=\"hljs-built_in\">any</span>, <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">length</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<h2>FFT &amp; MDCT Functions</h2>\n<h3>fft()</h3>\n<p>Performs a FFT (or inverse in the case of ifft()) on the data in the local memory buffer at the offset specified by the first parameter. The size of the FFT is specified by the second parameter, which must be 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The outputs are permuted, so if you plan to use them in-order, call fft_permute(buffer, size) before and fft_ipermute(buffer,size) after your in-order use. Your inputs or outputs will need to be scaled down by 1/size, if used.</p>\n<p>Note that the FFT/IFFT require real/imaginary input pairs (so a 256 point FFT actually works with 512 items).</p>\n<p>Note that the FFT/IFFT must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.</p>\n<p>The fft_real()/ifft_real() variants operate on a set of size real inputs, and produce size/2 complex outputs. The first output pair is DC,nyquist. Normally this is used with fft_permute(buffer,size/2).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">fft</span>(<span class=\"hljs-attr\">startIndex</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<h3>ifft()</h3>\n<p>Performs a FFT (or inverse in the case of ifft()) on the data in the local memory buffer at the offset specified by the first parameter. The size of the FFT is specified by the second parameter, which must be 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The outputs are permuted, so if you plan to use them in-order, call fft_permute(buffer, size) before and fft_ipermute(buffer,size) after your in-order use. Your inputs or outputs will need to be scaled down by 1/size, if used.</p>\n<p>Note that the FFT/IFFT require real/imaginary input pairs (so a 256 point FFT actually works with 512 items).</p>\n<p>Note that the FFT/IFFT must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.</p>\n<p>The fft_real()/ifft_real() variants operate on a set of size real inputs, and produce size/2 complex outputs. The first output pair is DC,nyquist. Normally this is used with fft_permute(buffer,size/2).</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">ifft</span>(<span class=\"hljs-attr\">startIndex</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<h3>convolve_c()</h3>\n<p>Used to convolve two buffers, typically after FFTing them. convolve_c works with complex numbers. The sizes specify number of items (the number of complex number pairs).</p>\n<p>Note that the convolution must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">convolve_c</span>(<span class=\"hljs-attr\">destination</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">source</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n",
    "changelog": "<h1>Changelog</h1>\n<ul>\n<li>v0.11.0:<ul>\n<li>Allow configuration of <code>ext_tail_size</code> (<code>config.extTailSize</code>)</li>\n<li>File selector slider</li>\n<li>@block section (<code>onBlock</code>)</li>\n<li><code>while</code> loops</li>\n<li>Start location getter for <code>EelBuffer</code>: <code>EelBuffer.start()</code></li>\n<li>New memory function: <code>memset()</code></li>\n<li>New file functions: <code>file_open()</code>, <code>file_close()</code>, <code>file_avail()</code>, <code>file_riff()</code>, <code>file_mem()</code></li>\n<li>FFT functions: <code>fft()</code>, <code>ifft()</code>, <code>convolve_c()</code></li>\n<li>Cab sim demo (very early stage)</li>\n</ul>\n</li>\n<li>v0.9.1:<ul>\n<li>New example: 4-Band RBJ EQ</li>\n</ul>\n</li>\n<li>v0.7.0:<ul>\n<li>Allow simple plain objects</li>\n<li>Allow function declaration in block statement</li>\n<li>Allow member expression returns</li>\n</ul>\n</li>\n<li>v0.5.0:<ul>\n<li>MacOS App is signed now 🖋️</li>\n<li>More documentation</li>\n</ul>\n</li>\n<li>v0.3.0: Initial release</li>\n</ul>\n",
    "development": "<h1>Development</h1>\n<h2>Requirements</h2>\n<ul>\n<li><code>Node.js</code> 18 and higher</li>\n<li>Terminal emulator<ul>\n<li>Linux, MacOS: <code>bash</code> or <code>zsh</code></li>\n<li>Windows: <code>git bash</code> (comes with <code>git</code>)</li>\n</ul>\n</li>\n<li><code>Reaper</code> DAW, obviously</li>\n</ul>\n<h2>Setup</h2>\n<ul>\n<li>Install dependencies for all packages:<ul>\n<li><code>cd scripts</code></li>\n<li><code>./install.sh</code></li>\n</ul>\n</li>\n<li>Open a different terminal session for each of the following steps<ul>\n<li>Go to <code>compiler</code> and do <code>npm run dev</code></li>\n<li>Go to <code>gui</code> and do <code>npm run dev</code></li>\n<li>Go to <code>desktop</code> and do <code>npm run dev</code>. Now, the electron build should open.</li>\n</ul>\n</li>\n</ul>\n<h2>Guidelines</h2>\n<ul>\n<li>We aim for 100% test coverage for the compiler package</li>\n</ul>\n<h2>Architecture</h2>\n<p>TODO</p>\n<h2>Recommended VSCode Extensions</h2>\n<p>TODO</p>\n",
    "feature-comparison": "<h1>Feature Comparison with JSFX</h1>\n<p>JSFX Reference: <a target=\"_blank\" href=\"https://www.reaper.fm/sdk/js/js.php\">https://www.reaper.fm/sdk/js/js.php</a></p>\n<p>Find the JS2EEL type declarations <a target=\"_blank\" href=\"https://github.com/steeelydan/js2eel/blob/main/compiler/js2eel.d.ts\">here</a>. The <a target=\"_blank\" href=\"https://github.com/steeelydan/js2eel/blob/main/docs/api-documentation.md\">API Docs</a> are created from that file, as well as the code completion.</p>\n<p>✅: Implemented</p>\n<p>🕒: Should be implemented</p>\n<p>❌: Won&#39;t be implemented</p>\n<p>❔: Unknown if feasible, useful, or working properly</p>\n<h2>Description Lines and Utility Features</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>✅</td>\n<td><code>desc</code></td>\n<td>Implemented as part of <code>config()</code></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>tags</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>options</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td>JSFX comments</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Code Sections</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>✅</td>\n<td><code>@init</code></td>\n<td><code>onInit()</code></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>@slider</code></td>\n<td><code>onSlider()</code></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>@block</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>@sample</code></td>\n<td><code>onSample()</code></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>@serialize</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>@gfx</code></td>\n<td>Declarative with React-like syntax?</td>\n</tr>\n</tbody></table>\n<h2>File Handling</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🕒</td>\n<td><code>import</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>filename</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>file_open(index | slider)</code></td>\n<td>Slider variant implemented</td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>file_close(handle)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>file_rewind(handle)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>file_var(handle, variable)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>file_mem(handle, offset, length)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>file_avail(handle)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>file_riff(handle, nch, samplerate)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>file_text(handle, istext)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>file_string(handle,str)</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Routing and Input</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>✅</td>\n<td><code>in_pin</code>, <code>out_pin</code></td>\n<td>Implemented as part of <code>config()</code></td>\n</tr>\n</tbody></table>\n<h2>UI</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>✅</td>\n<td>Slider: Normal</td>\n<td><code>slider()</code></td>\n</tr>\n<tr>\n<td>✅</td>\n<td>Slider: Select</td>\n<td><code>selectBox()</code></td>\n</tr>\n<tr>\n<td>✅</td>\n<td>Slider: File</td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td>Hidden sliders</td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td>Slider: shapes</td>\n<td></td>\n</tr>\n<tr>\n<td>❌</td>\n<td><code>slider(index)</code></td>\n<td>Might not be necessary as every slider is bound to a variable</td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>slider_next_chg(sliderindex,nextval)</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Sample Access</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>✅</td>\n<td><code>spl0</code> - <code>spl63</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>spl(index)</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Audio and Transport State Vars</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>✅</td>\n<td><code>srate</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>num_ch</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>samplesblock</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>tempo</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>play_state</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>play_position</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>beat_position</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>ts_num</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>ts_denom</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Data Structures and Encodings</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>✅</td>\n<td>Local variables</td>\n<td><code>let</code> &amp; <code>const</code></td>\n</tr>\n<tr>\n<td>✅</td>\n<td>Local address space (buffers)</td>\n<td><code>EelBuffer</code> (equivalent to JSFX buffers) &amp; <code>EelArray</code> (inlined)</td>\n</tr>\n<tr>\n<td>❔</td>\n<td>Local address space 8m word restriction</td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td>Global address space (<code>gmem[]</code>)</td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td>Named global address space</td>\n<td></td>\n</tr>\n<tr>\n<td>❔</td>\n<td>Global named variables (<code>_global.</code> prefix)</td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td>Hex numbers</td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td>ASCII chars</td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td>Bitmasks</td>\n<td></td>\n</tr>\n<tr>\n<td>❔</td>\n<td>Strings</td>\n<td>Already fully implemented?</td>\n</tr>\n</tbody></table>\n<h2>Control Structures</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>✅</td>\n<td>Functions</td>\n<td>User definable functions are inlined in compiled code</td>\n</tr>\n<tr>\n<td>✅</td>\n<td>Conditionals</td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td>Conditional Branching</td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>loop(counter, actions...)</code></td>\n<td>We should have generic loops even if sample- and channel related iterations should be handled by <code>eachChannel()</code></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>while(actions..., condition)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>while(condition) (actions...)</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Operators</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>✅</td>\n<td><code>!value</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>-value</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>+value</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>base ^ exponent</code></td>\n<td><code>Math.pow(base, exponent) or **</code></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>numerator % denominator</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>value / divisor</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>value * another_value</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>value - another_value</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>value + another_value</code></td>\n<td></td>\n</tr>\n<tr>\n<td>❌</td>\n<td><code>value1 == value2</code></td>\n<td>Has a tolerance of 0.00001. We only allow <code>===</code></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>value1 === value2</code></td>\n<td></td>\n</tr>\n<tr>\n<td>❌</td>\n<td><code>value1 != value2</code></td>\n<td>Has a tolerance of 0.00001. We only allow <code>===</code></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>value1 !== value2</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>value1 &lt; value2</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>value1 &gt; value2</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>value1 &lt;= value2</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>value1 &gt;= value2</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>y || z</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>y &amp;&amp; z</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>y ? z</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>y ? z : x</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>y = z</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>y *= z</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>y /= divisor</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>y %= divisor</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>base ^= exponent</code></td>\n<td>Should be implemented as JavaScript&#39;s <code>**=</code></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>y += z</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>y -= z</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Bitwise operators</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🕒</td>\n<td><code>value &lt;&lt; shift_amt</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>value &gt;&gt; shift_amt</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>a | b</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>a &amp; b</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>a ~ b</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>y | = z</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>y &amp;= z</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>y ~= z</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Math Functions</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>✅</td>\n<td><code>sin(angle)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>cos(angle)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>tan(angle)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>asin(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>acos(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>atan(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>atan2(x, y)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>sqr(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>sqrt(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>pow(x, y)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>exp(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>log(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>log10(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>abs(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>min(x, y)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>max(x, y)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>sign(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>rand(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>floor(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>ceil(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>invsqrt(x)</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Time Functions</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🕒</td>\n<td><code>time([v])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>time_precise([v])</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Midi Functions</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🕒</td>\n<td><code>midisend(offset, msg1, msg2)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>midisend(offset, msg1, msg2 + (msg3 * 256))</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>midisend(offset, msg1, msg2, msg3)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>midisend_buf(offset, buf, len)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>midisend_str(offset, string)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>midirecv(offset, msg1, msg23)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>midirecv(offset, msg1, msg2, msg3)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>midirecv_buf(offset, buf, maxlen)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>midirecv_str(offset, string)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>midisyx(offset, msgptr, len)</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Memory/FFT/MDCT Functions</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🕒</td>\n<td><code>mdct(start_index, size)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>imdct(start_index, size)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>fft(start_index, size)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>ifft(start_index, size)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>fft_real(start_index, size)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>ifft_real(start_index, size)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>fft_permute(index, size)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>fft_ipermute(index, size)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>convolve_c(dest, src, size)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>freembuf(top)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>memcpy(dest, source, length)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>memset(dest, value, length)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>mem_multiply_sum(buf1, buf2, length)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>mem_insert_shuffle(buf, len, value)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>__memtop()</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>stack_push(value)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>stack_pop(value)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>stack_peek(index)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>stack_exch(value)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>atomic_setifequal(dest, value, newvalue)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>atomic_exch(val1, val2)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>atomic_add(dest_val1, val2)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>atomic_set(dest_val1, val2)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>atomic_get(val)</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Host Interaction Functions</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🕒</td>\n<td><code>sliderchange(mask | sliderX)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>slider_automate(mask or sliderX[, end_touch])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>slider_show(mask or sliderX[, value]) </code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>export_buffer_to_project(buffer, length_samples, nch, srate, track_index[, flags, tempo, planar_pitch]) --</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>get_host_numchan()</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>set_host_numchan(numchan)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>get_pin_mapping(inout, pin, startchan, chanmask)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>set_pin_mapping(inout, pin, startchan, chanmask, mapping)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>get_pinmapper_flags(no parameters)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>set_pinmapper_flags(flags)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>get_host_placement([chain_pos, flags])</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>String Functions</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🕒</td>\n<td><code>strlen(str)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>strcpy(str, srcstr)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>strcat(str, srcstr)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>strcmp(str, str2)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>stricmp(str, str2)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>strncmp(str, str2, maxlen)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>strnicmp(str, str2, maxlen)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>strncpy(str, srcstr, maxlen)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>strncat(str, srcstr, maxlen)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>strcpy_from(str, srcstr, offset)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>strcpy_substr(str, srcstr, offset, maxlen)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>str_getchar(str, offset[, type])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>str_setchar(str, offset, value[, type])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>strcpy_fromslider(str, slider)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>sprintf(str, format, ...)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>match(needle, haystack, ...)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>matchi(needle, haystack, ...)</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>GFX Functions</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🕒</td>\n<td><code>gfx_set(r[g, b, a, mode, dest])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_lineto(x, y, aa)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_line(x, y, x2, y2[, aa])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_rectto(x, y)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_rect(x, y, w, h)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_setpixel(r, g, b)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_getpixel(r, g, b)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_drawnumber(n, ndigits)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_drawchar($&#39;c&#39;)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_drawstr(str[, flags, right, bottom])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_measurestr(str, w, h)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_setfont(idx[, fontface, sz, flags])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_getfont()</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_printf(str, ...)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_blurto(x,y)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_blit(source, scale, rotation)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_blit(source, scale, rotation[, srcx, srcy, srcw, srch, destx, desty, destw, desth, rotxoffs, rotyoffs])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_blitext(source, coordinatelist, rotation)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_getimgdim(image, w, h)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_setimgdim(image, w,h)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_loadimg(image, filename)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_muladdrect(x,y,w,h, mul_r, mul_g, mul_b[, mul_a, add_r, add_g, add_b, add_a])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_deltablit(srcimg,srcx,srcy,srcw,srch, destx, desty, destw, desth, dsdx, dtdx, dsdy, dtdy, dsdxdy, dtdxdy[, usecliprect=1] )</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_transformblit(srcimg, destx, desty, destw, desth, div_w, div_h, table)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_circle(x,y,r[,fill,antialias])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_roundrect(x,y,w,h,radius[,antialias])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_arc(x,y,r, ang1, ang2[,antialias])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_triangle(x1,y1,x2,y2,x3,y3[,x4,y4,...])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_getchar([char, unicodechar])</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_showmenu(&quot;str&quot;)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_setcursor(resource_id[,&quot;custom cursor name&quot;])</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>GFX Vars</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🕒</td>\n<td><code>gfx_r</code>, <code>gfx_g</code>, <code>gfx_b</code>, <code>gfx_a</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_w</code>, <code>gfx_h</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_x</code>, <code>gfx_y</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_mode</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_clear</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_dest</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_texth</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_ext_retina</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>gfx_ext_flags</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>mouse_x</code>, <code>mouse_y</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>mouse_cap</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>mouse_wheel</code>, <code>mouse_hwheel</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Special Vars and Extended Functionality</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🕒</td>\n<td><code>trigger</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>ext_noinit</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>ext_nodenorm</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✅</td>\n<td><code>ext_tail_size</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>reg00-reg99</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>_global.*</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2>Delay Compensation Vars</h2>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Feature</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🕒</td>\n<td><code>pdc_delay</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>pdc_bot_ch</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>pdc_top_ch</code></td>\n<td></td>\n</tr>\n<tr>\n<td>🕒</td>\n<td><code>pdc_midi</code></td>\n<td></td>\n</tr>\n</tbody></table>\n",
    "getting-started": "<h1>Getting Started: Your First JS2EEL Plugin</h1>\n<p>Let&#39;s create our first JS2EEL plugin. We&#39;ll write it in JavaScript. JS2EEL will compile it into a REAPER JSFX plugin that you can use instantly.</p>\n<p>Our plugin will take an input audio signal and modify its volume. If you&#39;d like to see the finished plugin, feel free to load the example plugin <code>volume.js</code>.</p>\n<h2>Step 1: Create a New File</h2>\n<p>Click on the &quot;New File&quot; button in the upper left half of the window.</p>\n<p>A modal will appear where you have to enter a <code>filename</code> for the JavaScript code and a <code>description</code> that will be used to reference the JSFX plugin in REAPER. Let&#39;s start with the same value for both: <code>volume</code>.</p>\n<p>As you create the new file, the JS code tab will be pre-populated with a minimal template. There will be a call to the <code>config()</code> function, where the name and the channel configuration of the plugin is defined:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title function_\">config</span>({ <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;volume&#x27;</span>, <span class=\"hljs-attr\">inChannels</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">outChannels</span>: <span class=\"hljs-number\">2</span> });\n</code></pre>\n<p>Take a look at the resulting JSFX code on the right. If you&#39;re familiar with JSFX, you&#39;ll meet some old friends here: <code>desc:</code> and the <code>in_pin</code> and <code>out_pin</code> configuration for your plugin&#39;s channel routing.</p>\n<p>Additionally, a template for the <code>onSample()</code> function call is provided. This is a JS2EEL library function that iterates through every sample of the audio block and allows you to modify it. This corresponds to the <code>@sample</code> part in JSFX.</p>\n<h2>Step 2: Declare Volume Adjustment Holder Variables</h2>\n<p>Next, we will create variables to hold the current volume level and the target volume level. Between <code>config()</code> and <code>onSample()</code>, add the following code:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> volume = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> target = <span class=\"hljs-number\">0</span>;\n</code></pre>\n<p><code>volume</code> represents the volume in dB, and <code>target</code> represents the target volume in linear scale.</p>\n<h2>Step 3: Create a Slider for User Input</h2>\n<p>To allow the user to adjust the volume, we&#39;ll use a slider. We&#39;ll bind that slider to the <code>volume</code> variable created above. After the variable declarations, add the following code to your file:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title function_\">slider</span>(<span class=\"hljs-number\">1</span>, volume, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-string\">&#x27;Volume [dB]&#x27;</span>);\n</code></pre>\n<p>As you might know, slider numbering is important in EEL. It starts at 1, and so our slider takes <code>1</code> as the first argument.</p>\n<p>The second argument is the variable to bind to: <code>volume</code>.</p>\n<p>The third argument is the default value: <code>0</code>.</p>\n<p>The fourth and fifth arguments are the minimum and maximum values: <code>-150</code> and <code>18</code> dB, respectively.</p>\n<p>The sixth argument is the step size: <code>0.1</code>.</p>\n<p>The last argument is the label for the slider which will be displayed in the GUI: <code>Volume [dB]</code>.</p>\n<h2>Step 4: Handle Slider Value Changes</h2>\n<p>Now, we need to update the target variable whenever the user adjusts the slider. We&#39;ll use the <code>onSlider()</code> library function to handle slider value changes. This corresponds to EEL&#39;s <code>@slider</code>. After the slider definition via <code>slider()</code>, add the following code to your file:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title function_\">onSlider</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (volume &gt; -<span class=\"hljs-number\">149.9</span>) {\n        target = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">pow</span>(<span class=\"hljs-number\">10</span>, volume / <span class=\"hljs-number\">20</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        target = <span class=\"hljs-number\">0</span>;\n    }\n});\n</code></pre>\n<p>Here we assign a linear target level to the <code>target</code> variable, which will be used later to adjust our sample amplitude. If the slider is at its lower boundary, we set the target to 0 to mute the audio.</p>\n<h2>Step 5: Process Audio Samples</h2>\n<p>The final step is to process audio samples based on the calculated target volume. We&#39;ll use the <code>onSample()</code> function to perform audio processing. This corresponds to EEL&#39;s <code>@sample</code>. In the callback arrow function parameter of <code>onSample()</code>, add the following code:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title function_\">eachChannel</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">sample, _ch</span>) =&gt;</span> {\n    sample *= target;\n});\n</code></pre>\n<p><code>eachChannel()</code> is another JS2EEL library function that makes it easy to manipulate samples per channel. It can only be called in onSample. It has no equivalent in EEL. We just multiply every sample in each of the two channels by the target volume to adjust its amplitude respectively.</p>\n<h2>Finished Plugin</h2>\n<p>Here is the complete code:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title function_\">config</span>({ <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;volume&#x27;</span>, <span class=\"hljs-attr\">inChannels</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">outChannels</span>: <span class=\"hljs-number\">2</span> });\n\n<span class=\"hljs-keyword\">let</span> volume = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> target = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-title function_\">slider</span>(<span class=\"hljs-number\">1</span>, volume, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-string\">&#x27;Volume [dB]&#x27;</span>);\n\n<span class=\"hljs-title function_\">onSlider</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (volume &gt; -<span class=\"hljs-number\">149.9</span>) {\n        target = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">pow</span>(<span class=\"hljs-number\">10</span>, volume / <span class=\"hljs-number\">20</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        target = <span class=\"hljs-number\">0</span>;\n    }\n});\n\n<span class=\"hljs-title function_\">onSample</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">eachChannel</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">sample, _ch</span>) =&gt;</span> {\n        sample *= target;\n    });\n});\n</code></pre>\n<h2>Conclusion</h2>\n<p>That&#39;s it! You&#39;ve successfully created a simple volume plugin using JS2EEL. If you&#39;re using the web app version of JS2EEL, copy the JSFX code into a new JSFX in REAPER to hear it in action. If you&#39;re using the desktop app and have configured the output path correctly, your <code>volume</code> JSFX should appear in the <code>JS</code> subdirectory of the FX selector.</p>\n<p>Feel free to take a look at the other examples. You&#39;ll be inspired to write your own JS2EEL plugin in no time!</p>\n",
    "limitations": "<h1>Limitations</h1>\n<ul>\n<li>Right now still not very expressive</li>\n</ul>\n<h2>Accessing Arrays</h2>\n<ul>\n<li>Iteration only possible with variable known at compile time<ul>\n<li>Alternative: loops (TBI), but slower</li>\n</ul>\n</li>\n</ul>\n<p>TODO</p>\n",
    "shortcuts": "<h1>Keyboard Shortcuts</h1>\n<h2>Editor</h2>\n<table>\n<thead>\n<tr>\n<th>Linux &amp; Windows</th>\n<th>Mac</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Ctrl + S</code></td>\n<td><code>Cmd + S</code></td>\n<td>Save</td>\n</tr>\n<tr>\n<td><code>Ctrl + I</code></td>\n<td><code>Cmd + I</code></td>\n<td>Autoformat</td>\n</tr>\n<tr>\n<td><code>Ctrl + /</code></td>\n<td><code>Cmd + /</code></td>\n<td>Toggle line comment(s)</td>\n</tr>\n<tr>\n<td><code>Alt + Up/Down</code></td>\n<td><code>Alt + Up/Down</code></td>\n<td>Move line(s) up/down</td>\n</tr>\n<tr>\n<td><code>Ctrl + D</code></td>\n<td><code>Cmd + D</code></td>\n<td>Select next symbol occurence</td>\n</tr>\n<tr>\n<td><code>Ctrl + F</code></td>\n<td><code>Cmd + F</code></td>\n<td>Open search panel</td>\n</tr>\n</tbody></table>\n",
    "useful-resources": "<h1>Useful Resources</h1>\n<h2>REAPER EEL Language / JSFX</h2>\n<ul>\n<li><a target=\"_blank\" href=\"https://www.reaper.fm/sdk/js/js.php\">Cockos JSFX documentation</a></li>\n</ul>\n<h2>DSP</h2>\n<ul>\n<li>Eric Tarr: <a target=\"_blank\" href=\"https://www.routledge.com/Hack-Audio-An-Introduction-to-Computer-Programming-and-Digital-Signal-Processing/Tarr/p/book/9781138497559\">Hack Audio</a></li>\n<li>Will Pirkle: <a target=\"_blank\" href=\"https://www.willpirkle.com/\">Designing Audio Effect Plug-Ins in C++</a></li>\n<li>Udo Zölzer (ed.): <a target=\"_blank\" href=\"https://www.dafx.de/DAFX_Book_Page_2nd_edition/index.html\">DAFX: Digital Audio Effects</a></li>\n<li>W3C Working Group: <a target=\"_blank\" href=\"https://www.w3.org/TR/audio-eq-cookbook/\">Audio EQ Cookbook ('RBJ' EQ curves)</a></li>\n</ul>\n<h2>Compiler Development</h2>\n<ul>\n<li>Robert Nystrom&#39;s <a target=\"_blank\" href=\"https://craftinginterpreters.com/\">Crafting Interpreters</a> book</li>\n</ul>\n"
}